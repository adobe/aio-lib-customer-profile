/**
 * Returns a Promise that resolves with a new CustomerProfileAPI object.
 *
 * @param {string} tenantId the tenant id
 * @param {string} iMSOrgId the iMSOrgId for your integration
 * @param {string} apiKey the API key for your integration
 * @param {string} accessToken the access token for your integration
 * @param {string} [sandbox] sandbox name
 * @returns {Promise<CustomerProfileAPI>} a Promise with a CustomerProfileAPI object
 */
declare function init(tenantId: string, iMSOrgId: string, apiKey: string, accessToken: string, sandbox?: string): Promise<CustomerProfileAPI>;

declare class CustomerProfileAPI {
    /**
     * Initializes a CustomerProfileAPI object and returns it.
     *
     * @param {string} tenantId the tenant id
     * @param {string} iMSOrgId the iMSOrgId for your integration
     * @param {string} apiKey the API key for your integration
     * @param {string} accessToken the access token for your integration
     * @param {string} [sandbox] sandbox name
     * @returns {Promise<CustomerProfileAPI>} a CustomerProfileAPI object
     */
    init(tenantId: string, iMSOrgId: string, apiKey: string, accessToken: string, sandbox?: string): Promise<CustomerProfileAPI>;
    /**
     * The tenant id
     *
     * @type {string}
     */
    tenantId: string;
    /**
     * The iMSOrgId
     *
     * @type {string}
     */
    iMSOrgId: string;
    /**
     * The api key from your integration
     *
     * @type {string}
     */
    apiKey: string;
    /**
     * The access token from your integration
     *
     * @type {string}
     */
    accessToken: string;
    /**
     * The sandbox name
     *
     * @type {string}
     */
    sandbox: string;
    /**
     * Get Profile by ID.
     *
     * @param {object} [parameters={}] parameters to pass
     * @returns {Promise<Response>} the response
     */
    getProfile(parameters?: any): Promise<Response>;
    /**
     * Get ExperienceEvents.
     *
     * @param {object} [parameters={}] parameters to pass
     * @returns {Promise<Response>} the response
     */
    getExperienceEvents(parameters?: any): Promise<Response>;
    /**
     * Retrieve a list of computed attributes.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @returns {Promise<Response>} the response
     */
    listComputedAttributes(parameters?: any): Promise<Response>;
    /**
     * Create a computed attribute.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @returns {Promise<Response>} the response
     */
    createComputedAttribute(parameters?: any): Promise<Response>;
    /**
     * Retrieve a specific computed attribute by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.ATTRIBUTE_ID - The unique, read-only ID of the computed attribute that is generated by the system when the attribute is created.
     * @returns {Promise<Response>} the response
     */
    lookupComputedAttribute(parameters?: {
        ATTRIBUTE_ID: string;
    }): Promise<Response>;
    /**
     * Update a computed attribute by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.ATTRIBUTE_ID - The unique, read-only ID of the computed attribute that is generated by the system when the attribute is created.
     * @returns {Promise<Response>} the response
     */
    updateComputedAttribute(parameters?: {
        ATTRIBUTE_ID: string;
    }): Promise<Response>;
    /**
     * Delete a computed attribute by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.ATTRIBUTE_ID - The unique, read-only ID of the computed attribute that is generated by the system when the attribute is created.
     * @returns {Promise<Response>} the response
     */
    deleteComputedAttribute(parameters?: {
        ATTRIBUTE_ID: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of merge policies.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @param {string} [parameters.start] - Page offset - As per created time of resource
     * @param {number} [parameters.limit] - Page Size
     * @param {string} [parameters.orderBy] - Model attribute which will be using for ordering
     * @param {string} [parameters.'schema.name'] - Schema class ID
     * @param {boolean} [parameters.default] - default flag
     * @returns {Promise<Response>} the response
     */
    getConfigMergePolicies(parameters?: {
        'x-request-id'?: string;
        start?: string;
        limit?: number;
        orderBy?: string;
        default?: boolean;
    }): Promise<Response>;
    /**
     * Create a new merge policy.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    postConfigMergePolicies(parameters?: {
        'Content-Type': string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup a merge policy by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.mergePolicyId - Merge policy ID.
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    getConfigMergePoliciesMergePolicyId(parameters?: {
        mergePolicyId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Update a merge policy by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.mergePolicyId - Merge policy ID.
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    putConfigMergePoliciesMergePolicyId(parameters?: {
        mergePolicyId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Update one or more attributes of a merge policy specified by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.mergePolicyId - Merge policy ID.
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    patchConfigMergePoliciesMergePolicyId(parameters?: {
        mergePolicyId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete a merge policy by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.mergePolicyId - Merge policy ID.
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    deleteConfigMergePoliciesMergePolicyId(parameters?: {
        mergePolicyId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup an entity by ID or namespace.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'schema.name' - XED schema class name.
     * @param {string} [parameters.'relatedSchema.name'] - XDM schema class name that the ExperienceEvent is associated with. Used when looking up ExperienceEvents.
     * @param {string} [parameters.entityId] - ID of the entity. For Native XID lookup, use `entityId=<XID>` and leave `entityIdNS` absent; For ID:NS lookup, use both `entityId` and `entityIdNS` fields.
     * @param {string} [parameters.entityIdNS] - Identity Namespace code. Used for ID:NS lookup. If this field is used, `entityId` cannot be empty.
     * @param {string} [parameters.relatedEntityId] - ID of the entity that the ExperienceEvents are associated with. Used when looking up ExperienceEvents. For Native XID lookup, use `relatedEntityId=<XID>` and leave `relatedEntityIdNS` absent; For ID:NS lookup, use both `relatedEntityId` and `relatedEntityIdNS` fields.
     * @param {string} [parameters.relatedEntityIdNS] - Identity Namespace code of the related entity ID of ExperienceEvent. Used when looking up ExperienceEvents. If this field is used, `entityId` cannot be empty.
     * @param {string} [parameters.fields] - Fields for the model object. By default, all fields will be fetched. Separated by comma.
     * @param {string} [parameters.mergePolicyId] - ID of the merge policy. A merge policy includes information for Identity stitching and key-value XDM object merging. If not present, the default merge policy will be used.
     * @param {number} [parameters.startTime] - Start time of Time range filter for ExperienceEvents. Should be at millisecond granularity. Included. Default: From beginning.
     * @param {number} [parameters.endTime] - End time of Time range filter for ExperienceEvents. Should be at millisecond granularity. Excluded. Default: To the end.
     * @param {number} [parameters.limit] - Number of records to return from the result. Only for time-series objects. Default: 1000
     * @param {string} [parameters.orderby] - The sort order of retrieved ExperienceEvents by timestamp. Syntax: (+/-)timestamp. Default: +timestamp
     * @returns {Promise<Response>} the response
     */
    getAccessEntities(parameters?: {
        entityId?: string;
        entityIdNS?: string;
        relatedEntityId?: string;
        relatedEntityIdNS?: string;
        fields?: string;
        mergePolicyId?: string;
        startTime?: number;
        endTime?: number;
        limit?: number;
        orderby?: string;
    }): Promise<Response>;
    /**
     * Lookup multiple entities by IDs or namespaces.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @returns {Promise<Response>} the response
     */
    postAccessEntities(parameters?: {
        'Content-Type': string;
    }): Promise<Response>;
    /**
     * Delete an entity by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'schema.name' - Name of the associated XDM schema.
     * @param {string} [parameters.entityId] - ID of the entity. For Native XID, use `entityId=<XID>` and leave `entityIdNS` absent; For ID:NS, use both `entityId` and `entityIdNS` fields.
     * @param {string} [parameters.entityIdNS] - Identity Namespace code. Used for ID:NS. If this field is used, `entityId` cannot be empty.
     * @param {string} [parameters.mergePolicyId] - ID of the merge policy. A merge policy includes information for Identity stitching and key-value XDM object merging. If not present, the default merge policy will be used.
     * @returns {Promise<Response>} the response
     */
    deleteAccessEntities(parameters?: {
        entityId?: string;
        entityIdNS?: string;
        mergePolicyId?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of all export jobs.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {number} [parameters.limit] - Limit the number of export jobs returned in the list.
     * @param {string} [parameters.offset] - Offset the page of results returned (ordered by created time of resource)
     * @param {string} [parameters.status] - Filter the export jobs returned by job status. Possible values are "NEW", "SUCCEEDED", and "FAILED".
     * @returns {Promise<Response>} the response
     */
    getScanJobsRoute(parameters?: {
        limit?: number;
        offset?: string;
        status?: string;
    }): Promise<Response>;
    /**
     * Create a new export job.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} [parameters.'x-profile-instance-id'] - Profile Instance ID
     * @returns {Promise<Response>} the response
     */
    postScanJobRoute(parameters?: {
        'Content-Type': string;
        'x-profile-instance-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup an export job by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.exportJobId - Export job ID
     * @returns {Promise<Response>} the response
     */
    getScanJobRoute(parameters?: {
        exportJobId: string;
    }): Promise<Response>;
    /**
     * Cancel or delete an export job by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.exportJobId - Export job ID
     * @returns {Promise<Response>} the response
     */
    cancelScanJobRoute(parameters?: {
        exportJobId: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of segment definitions.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @param {number} [parameters.start] - Page offset - As per created time of resource
     * @param {number} [parameters.limit] - Page size
     * @param {number} [parameters.page] - Page number
     * @param {string} [parameters.sort] - Sort parameters
     * @returns {Promise<Response>} the response
     */
    getSegmentsRoute(parameters?: {
        'x-request-id': string;
        start?: number;
        limit?: number;
        page?: number;
        sort?: string;
    }): Promise<Response>;
    /**
     * Create a new segment definition.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @returns {Promise<Response>} the response
     */
    postSegmentRoute(parameters?: {
        'Content-Type': string;
        'x-request-id': string;
    }): Promise<Response>;
    /**
     * Lookup a segment definition by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.segmentId - Segment Definition ID.
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @returns {Promise<Response>} the response
     */
    getSegmentRoute(parameters?: {
        segmentId: string;
        'x-request-id': string;
    }): Promise<Response>;
    /**
     * Delete a segment definition by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.segmentId - Segment Definition ID.
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @returns {Promise<Response>} the response
     */
    deleteSegmentRoute(parameters?: {
        segmentId: string;
        'x-request-id': string;
    }): Promise<Response>;
    /**
     * Overwrite a segment definition.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.segmentId - Segment Definition ID.
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @returns {Promise<Response>} the response
     */
    patchSegmentRoute(parameters?: {
        segmentId: string;
        'Content-Type': string;
        'x-request-id': string;
    }): Promise<Response>;
    /**
     * Convert PQL formatting between pql/text and pql/json.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} parameters.'x-request-id' - Unique ID per request
     * @returns {Promise<Response>} the response
     */
    postSegmentConversionRoute(parameters?: {
        'Content-Type': string;
        'x-request-id': string;
    }): Promise<Response>;
    /**
     * Retrieve a list of all segment job requests.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @param {number} [parameters.start] - Page Offset - As per created Time of resource
     * @param {number} [parameters.limit] - Page Size
     * @param {string} [parameters.status] - The job status
     * @returns {Promise<Response>} the response
     */
    getSegmentJobs(parameters?: {
        'x-request-id'?: string;
        start?: number;
        limit?: number;
        status?: string;
    }): Promise<Response>;
    /**
     * Create a new segment job request.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @returns {Promise<Response>} the response
     */
    postSJRRoute(parameters?: {
        'Content-Type': string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup a segment job request by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.segmentJobId - Segment job request ID.
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @returns {Promise<Response>} the response
     */
    getSegmentJobsSegmentJobId(parameters?: {
        segmentJobId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Cancel or delete a segment job request by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.segmentJobId - Segment job request ID.
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @returns {Promise<Response>} the response
     */
    deleteSegmentJobsSegmentJobId(parameters?: {
        segmentJobId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Create a new preview job.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @returns {Promise<Response>} the response
     */
    postSessionlessPreviewRoute(parameters?: {
        'Content-Type': string;
    }): Promise<Response>;
    /**
     * Lookup the results of a preview job by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.previewId - ID of the preview job.
     * @param {string} [parameters.offset] - Page offset
     * @param {number} [parameters.limit] - How many entries should be present in a page. 1000 if not specified.
     * @returns {Promise<Response>} the response
     */
    getSessionlessPreviewStatusRoute(parameters?: {
        previewId: string;
        offset?: string;
        limit?: number;
    }): Promise<Response>;
    /**
     * Cancel or delete a preview job by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.previewId - ID of the preview job.
     * @returns {Promise<Response>} the response
     */
    deleteSessionLessPreviewStatusRoute(parameters?: {
        previewId: string;
    }): Promise<Response>;
    /**
     * Lookup the results of an estimate job by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.previewId - ID of the preview job.
     * @returns {Promise<Response>} the response
     */
    getEstimateStatusRoute(parameters?: {
        previewId: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of edge projection configurations. The latest definitions are returned.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.schemaName] - XDM schema name
     * @param {string} [parameters.name] - projection name
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    listProjectionConfigurations(parameters?: {
        'x-gw-ims-authorization': string;
        schemaName?: string;
        name?: string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Create a new edge projection configuration.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.schemaName - XDM schema name
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    createProjectionConfiguration(parameters?: {
        schemaName: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup an edge projection configuration by ID. The latest definition is returned.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.projectionid - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    getProjectionConfiguration(parameters?: {
        projectionid: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Create or update an edge projection configuration by ID. Overwrites the entire configuration.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.projectionid - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    updateProjectionConfiguration(parameters?: {
        projectionid: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete an edge projection configuration by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.projectionid - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    deleteProjectionConfiguration(parameters?: {
        projectionid: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of edge projection destinations. The latest definitions are returned.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    listProjectionDestinations(parameters?: {
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Create a new edge projection destination.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    createProjectionDestination(parameters?: {
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup an edge projection destination by ID. The latest definition is returned.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.destinationId - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    getProjectionDestination(parameters?: {
        destinationId: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Create or update an edge projection destination by ID. Overwrites the entire configuration.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.destinationId - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    putProjectionDestination(parameters?: {
        destinationId: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete an edge projection destination by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.destinationId - undefined
     * @param {string} parameters.'x-gw-ims-authorization' - Gateway IMS service token.
     * @param {string} [parameters.'x-user-token'] - User access token.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a client flow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    deleteProjectionDestination(parameters?: {
        destinationId: string;
        'x-gw-ims-authorization': string;
        'x-user-token'?: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of event types.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @param {number} [parameters.start] - Page offset for the response. Default is 0.
     * @param {number} [parameters.limit] - Page size
     * @param {string} [parameters.orderBy] - The model attribute to be used for ordering.
     * @returns {Promise<Response>} the response
     */
    getConfigEventTypes(parameters?: {
        'x-request-id'?: string;
        start?: number;
        limit?: number;
        orderBy?: string;
    }): Promise<Response>;
    /**
     * Create a new event type.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'x-profile-instance-id' - Profile instance ID.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    postConfigEventTypes(parameters?: {
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup an event type by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.eventTypeId - Event type ID.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    getConfigEventTypesEventTypeId(parameters?: {
        eventTypeId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Overwrite an event type by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.eventTypeId - Event type ID.
     * @param {string} parameters.'x-profile-instance-id' - Profile instance ID.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    putConfigEventTypesEventTypeId(parameters?: {
        eventTypeId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Update one or more attributes of an event type by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.eventTypeId - Event type ID.
     * @param {string} parameters.'x-profile-instance-id' - Profile instance ID.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    patchConfigEventTypesEventTypeId(parameters?: {
        eventTypeId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete an event type by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.eventTypeId - Event type ID.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    deleteConfigEventTypesEventTypeId(parameters?: {
        eventTypeId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of all macros for your organization.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @param {string} [parameters.start] - Page offset (at the created time of resource)
     * @param {number} [parameters.limit] - Maximum number of objects to display on each page.
     * @param {string} [parameters.orderBy] - Model attribute which will be using for ordering.
     * @param {string} [parameters.dataSetId] - Dataset ID.
     * @param {string} [parameters.schemaClassId] - Schema class ID.
     * @param {string} [parameters.value] - Event type value.
     * @returns {Promise<Response>} the response
     */
    getConfigMacros(parameters?: {
        'x-request-id'?: string;
        start?: string;
        limit?: number;
        orderBy?: string;
        dataSetId?: string;
        schemaClassId?: string;
        value?: string;
    }): Promise<Response>;
    /**
     * Create a new macro.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @returns {Promise<Response>} the response
     */
    postConfigMacros(parameters?: {
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup a macro by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.macroId - Macro ID. For example, `ca8fe8a8-0f38-478a-9905-fd515d1d2988`
     * @param {string} [parameters.'x-request-id'] - Request Id
     * @returns {Promise<Response>} the response
     */
    getConfigMacrosMacroId(parameters?: {
        macroId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Overwrite a macro by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.macroId - Macro ID. For example, `ca8fe8a8-0f38-478a-9905-fd515d1d2988`
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID
     * @param {string} [parameters.'x-request-id'] - Request ID
     * @returns {Promise<Response>} the response
     */
    putConfigMacrosMacroId(parameters?: {
        macroId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Update a macro by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.macroId - Macro ID. For example, `ca8fe8a8-0f38-478a-9905-fd515d1d2988`
     * @param {string} parameters.'x-profile-instance-id' - Profile Instance ID.
     * @param {string} [parameters.'x-request-id'] - Request ID.
     * @returns {Promise<Response>} the response
     */
    patchConfigMacrosMacroId(parameters?: {
        macroId: string;
        'x-profile-instance-id': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete a macro by ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.macroId - Macro ID. For example, `ca8fe8a8-0f38-478a-9905-fd515d1d2988`
     * @param {string} [parameters.'x-request-id'] - Request ID.
     * @returns {Promise<Response>} the response
     */
    deleteConfigMacrosMacroId(parameters?: {
        macroId: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of schedules for your IMS Org
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @param {number} [parameters.start] - Return results from a specific page offset. For example, `start=3`
     * @param {number} [parameters.limit] - Limit response to a specific number of objects. Must be a positive number. For example, `limit=10`
     * @returns {Promise<Response>} the response
     */
    getSchedules(parameters?: {
        'x-request-id'?: string;
        start?: number;
        limit?: number;
    }): Promise<Response>;
    /**
     * Create a schedule, including specifying the time when the schedule should be triggered.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    createSchedule(parameters?: {
        'Content-Type': string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Lookup a schedule by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.SCHEDULE_ID - The ID of the schedule against which the operation is being performed.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    getScheduleById(parameters?: {
        SCHEDULE_ID: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Update a schedule, including changing the trigger time or enabling/disabling the schedule.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.SCHEDULE_ID - The ID of the schedule against which the operation is being performed.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    updateSchedule(parameters?: {
        SCHEDULE_ID: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Delete a schedule by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.SCHEDULE_ID - The ID of the schedule against which the operation is being performed.
     * @param {string} [parameters.'x-request-id'] - Optional header that may be used for debugging purposes when investigating issues with a workflow. The same ID can be used to identify a single request to the service from a flow. A new ID should be created for each request.
     * @returns {Promise<Response>} the response
     */
    deleteSchedule(parameters?: {
        SCHEDULE_ID: string;
        'x-request-id'?: string;
    }): Promise<Response>;
    /**
     * Retrieve a list of all delete requests (Profile System Jobs) created by your organization.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {number} [parameters.start] - Return results from a specific page offset. For example, `start=3`
     * @param {number} [parameters.limit] - Limit response to a specific number of objects. Must be a positive number. For example, `limit=10`
     * @param {number} [parameters.page] - Return a specific page of results, as per the create time of the request. For example, `page=0`
     * @param {string} [parameters.sort] - Sort results by a specific field in ascending (`asc`) or descending (`desc`) order. The sort parameter does not work when returning multiple pages of results. For example, `sort=batchId:asc`
     * @returns {Promise<Response>} the response
     */
    listDeleteRequests(parameters?: {
        start?: number;
        limit?: number;
        page?: number;
        sort?: string;
    }): Promise<Response>;
    /**
     * Create a delete request (Profile System Job)
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.'Content-Type' - Type of content being sent in the body of the request. Should be 'application/json'.
     * @returns {Promise<Response>} the response
     */
    createDeleteRequest(parameters?: {
        'Content-Type': string;
    }): Promise<Response>;
    /**
     * View a specific delete request (Profile System Job) by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.ID - ID of the delete request (Profile System Job) that you wish to view. For example, '3e64ad31-5e6b-4399-80ad-ccfab54254ae'.
     * @returns {Promise<Response>} the response
     */
    viewDeleteRequest(parameters?: {
        ID: string;
    }): Promise<Response>;
    /**
     * Remove a specific delete request (Profile System Job) by its ID.
     *
     * @param {object} [parameters={}] - parameters to pass
     * @param {string} parameters.ID - ID of the delete request (Profile System Job) that you wish to view. For example, '3e64ad31-5e6b-4399-80ad-ccfab54254ae'.
     * @returns {Promise<Response>} the response
     */
    deleteDeleteRequest(parameters?: {
        ID: string;
    }): Promise<Response>;
}

/**
 * Create dynamic methods from openApi spec file
 *
 */
declare class OpenApi {
}

